@page "/transmissiontypes"
@using ProksRent_WebAPI.DTOs
@using ProksRent_WebAPI.Services
@using Microsoft.JSInterop
@inject ITransmissionTypeService TransmissionTypeService
@inject NavigationManager NavigationManager

<PageTitle>Transmission Types</PageTitle>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}
else
{
    <button class="btn btn-success mb-2" @onclick="AddTransmissionType">Add Transmission Type</button>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th @onclick="() => SortBy(nameof(TransmissionTypeDto.Name))">
                    Name @if (sortField == nameof(TransmissionTypeDto.Name)) { <span>@(sortAscending ? "↑" : "↓")</span> }
                </th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in PagedList)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => EditTransmissionType(item.Id)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteTransmissionType(item.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div>
        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(!CanGoPrevious)">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!CanGoNext)">Next</button>
    </div>
}

@code {
    private List<TransmissionTypeDto> transmissionTypes = new();
    private bool isLoading = true;
    private string? errorMessage;

    private int currentPage = 1;
    private int pageSize = 5;

    private string sortField = nameof(TransmissionTypeDto.Name);
    private bool sortAscending = true;

    private IEnumerable<TransmissionTypeDto> PagedList => transmissionTypes
        .OrderBy(t => sortField == nameof(TransmissionTypeDto.Name) ? t.Name : "")
        .ThenBy(t => t.Id)
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);

    private int totalPages => (int)Math.Ceiling((double)transmissionTypes.Count / pageSize);
    private bool CanGoPrevious => currentPage > 1;
    private bool CanGoNext => currentPage < totalPages;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            transmissionTypes = (await TransmissionTypeService.GetAllTransmissionTypesAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void AddTransmissionType() => NavigationManager.NavigateTo("/edit-transmissiontype/0");
    private void EditTransmissionType(int id) => NavigationManager.NavigateTo($"/edit-transmissiontype/{id}");

    private async Task DeleteTransmissionType(int id)
    {
        try
        {
            await TransmissionTypeService.DeleteTransmissionTypeAsync(id);
            transmissionTypes = (await TransmissionTypeService.GetAllTransmissionTypesAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void NextPage() { if (CanGoNext) currentPage++; }
    private void PreviousPage() { if (CanGoPrevious) currentPage--; }

    private void SortBy(string field)
    {
        if (sortField == field)
            sortAscending = !sortAscending;
        else
        {
            sortField = field;
            sortAscending = true;
        }

        transmissionTypes = sortAscending
            ? transmissionTypes.OrderBy(t => t.Name).ToList()
            : transmissionTypes.OrderByDescending(t => t.Name).ToList();
    }
}
