@page "/cars"
@using ProksRent_WebAPI.DTOs
@using ProksRent_WebAPI.Services
@using Microsoft.JSInterop
@inject ICarService CarService
@inject NavigationManager NavigationManager

<PageTitle>Cars</PageTitle>

<input class="form-control mb-2" @bind="searchTerm" @bind:event="oninput" placeholder="Search by model or brand..." />

<select class="form-select mb-2" @bind="sortOption">
    <option value="model">Sort by Model</option>
    <option value="brand">Sort by Brand</option>
    <option value="year">Sort by Year</option>
</select>

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Model</th>
                <th>Brand</th>
                <th>Year</th>
                <th>Car Number</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var car in PagedCars)
            {
                <tr>
                    <td>@car.Model</td>
                    <td>@car.BrandName</td>
                    <td>@car.Year</td>
                    <td>@car.CarNumber</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-1" @onclick="() => EditCar(car.Id)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteModal(car.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-between">
        <button class="btn btn-secondary" @onclick="PrevPage" disabled="@(currentPage == 1)">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@(currentPage == totalPages)">Next</button>
    </div>
}

@if (showDeleteModal)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="() => showDeleteModal = false"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this car?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => showDeleteModal = false">Cancel</button>
                    <button class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<CarDto> cars = new();
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private string sortOption = "model";

    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages = 1;

    private bool showDeleteModal = false;
    private int carIdToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadCars();
    }

    private async Task LoadCars()
    {
        try
        {
            isLoading = true;
            var allCars = await CarService.GetAllCarsAsync();

            cars = allCars
                .Where(c => string.IsNullOrEmpty(searchTerm) ||
                            c.Model.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                            c.BrandName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();

            cars = sortOption switch
            {
                "brand" => cars.OrderBy(c => c.BrandName).ToList(),
                "year" => cars.OrderByDescending(c => c.Year).ToList(),
                _ => cars.OrderBy(c => c.Model).ToList()
            };

            totalPages = (int)Math.Ceiling((double)cars.Count / pageSize);
            currentPage = Math.Clamp(currentPage, 1, totalPages);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading cars: " + ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private IEnumerable<CarDto> PagedCars => cars
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);

    private void EditCar(int carId)
    {
        NavigationManager.NavigateTo($"/edit-car/{carId}");
    }

    private void ShowDeleteModal(int carId)
    {
        carIdToDelete = carId;
        showDeleteModal = true;
    }

    private async Task ConfirmDelete()
    {
        await CarService.DeleteCarAsync(carIdToDelete);
        showDeleteModal = false;
        await LoadCars();
    }

    private async Task PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadCars();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadCars();
        }
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        currentPage = 1;
        await LoadCars();
    }
}
